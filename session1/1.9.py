#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 2019/2/27 9:52
# @Author  : bgzhou
# 查找两字典的相同点

dict1 = {
    'x': 1,
    'y': 2,
}
dict2 = {
    'w': 10,
    'x': 11,
    'y': 2
}

# 返回一个类集合对象，里面可以返回一个个的key值
print(dict1.keys() & dict2.keys())
print(dict2.keys() - dict1.keys())

# dict1.items返回的是一个类集合对象，里面可以返回一个个的tuple，tuple包含key和values
# for i in dict1.items():
#     print(i)

# dict.values()返回的是一个可迭代value值的迭代器，不能进行集合操作
c = {key: dict2[key] for key in dict2.keys() - {'w', 'x'}}
print(c)


# 一个字典就是一个键集合与值集合的映射关系。 字典的 keys() 方法返回一个展现键集合的键视图对象。
# 键视图的一个很少被了解的特性就是它们也支持集合操作，比如集合并、交、差运算。
# 所以，如果你想对集合的键执行一些普通的集合操作，可以直接使用键视图对象而不用先将它们转换成一个 set。
#
# 字典的 items() 方法返回一个包含 (键，值) 对的元素视图对象。
# 这个对象同样也支持集合操作，并且可以被用来查找两个字典有哪些相同的键值对。
#
# 尽管字典的 values() 方法也是类似，但是它并不支持这里介绍的集合操作。
# 某种程度上是因为值视图不能保证所有的值互不相同，这样会导致某些集合操作会出现问题。
# 不过，如果你硬要在值上面执行这些集合操作的话，你可以先将值集合转换成 set，然后再执行集合运算就行了。
